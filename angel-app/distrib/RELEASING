Overview
=========
When creating a public release, there are several steps that _must_
be respected:

1. preliminary things
   1.1 update the CHANGES file
   1.2 test the code
   1.3 make sure all code is "signed-off", e.g. not in a broken state and all
       developers are OK with a release
   1.4 Update setup.py to reflect the version number
2. create a subversion tag for the release in angel_app/tags/ (see versioning below)
3. the actual building:
   3.1 Prepare the release using the preprelease.sh script
   3.2 Build a release from the output of the preprelease.sh script using the
       buildApp.sh script of your liking from the angel_app/distrib/ dir
   3.3 if you create several builds, repeat steps 3.1 and 3.2
4. Run a minimal test of the build
5. Release to the public
   5.1 Update http://angelapp.missioneternity.org/
   5.2 Update http://www.missioneternity.org/download/
   5.3 Create a blog entry at http://www.etoy.com/blog/
   5.4 Ping etoy.AGENTS
6. Get drunk

Versioning
==========
Sample: 0.2.346

The release version number is a string comprised of three
period-separated integers. The first integer represents major
revisions to the application, such as revisions that implement
new features or major changes. The second integer denotes revisions
that implement less prominent features. The third integer represents
maintenance releases.

Build numbers
=============
Each released version of the application must correspond to a specific
revision of the source code from the repository. It is not allowed
to publish/distribute bundles that are created from local source trees.
Each published bundled has an additional BUILD ID associated to it,
which corresponds with the subversion revision it was create from.

Tags and branches
=================
For each public release, it is preferable to create a tag in the
subversion repository first. The tag should match the 3 digit
version string given to the application while bundling.

Branches
========
Branches are used for development purposes only. No releases will be
created from branches. (in subversion, branches and tags are
technically equivalent anyway)

